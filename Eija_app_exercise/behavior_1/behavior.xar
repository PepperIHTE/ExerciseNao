<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Marching" id="8" localization="8" tooltip="" x="126" y="170">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Go to position Stand" id="5" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="188" y="0">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Marching" id="1" localization="8" tooltip="" x="191" y="159">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="120">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="20" value="0.349159" />
                              <Key frame="40" value="1.49175" />
                              <Key frame="60" value="0.349159" />
                              <Key frame="80" value="0.349159" />
                              <Key frame="100" value="1.49175" />
                              <Key frame="120" value="0.349159" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="20" value="0.700723" />
                              <Key frame="40" value="1.0523" />
                              <Key frame="60" value="0.700723" />
                              <Key frame="80" value="-0.700723" />
                              <Key frame="100" value="-1.0523" />
                              <Key frame="120" value="-0.700723" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="20" value="-37.5322" />
                              <Key frame="40" value="-38.8506" />
                              <Key frame="60" value="-37.5322" />
                              <Key frame="80" value="-40.1641" />
                              <Key frame="100" value="11.692" />
                              <Key frame="120" value="-40.1641" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="20" value="9.05525" />
                              <Key frame="40" value="9.14314" />
                              <Key frame="60" value="9.05525" />
                              <Key frame="80" value="-17.1413" />
                              <Key frame="100" value="-15.9987" />
                              <Key frame="120" value="-17.1413" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="20" value="-60.9944" />
                              <Key frame="40" value="-79.6275" />
                              <Key frame="60" value="-60.9944" />
                              <Key frame="80" value="-60.9993" />
                              <Key frame="100" value="-16.2624" />
                              <Key frame="120" value="-60.9993" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="20" value="-47.4639" />
                              <Key frame="40" value="-85.521" />
                              <Key frame="60" value="-47.4639" />
                              <Key frame="80" value="-74.0903" />
                              <Key frame="100" value="-71.5415" />
                              <Key frame="120" value="-74.0903" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="20" value="0.2964" />
                              <Key frame="40" value="0.2964" />
                              <Key frame="60" value="0.2964" />
                              <Key frame="80" value="0.2952" />
                              <Key frame="100" value="0.2952" />
                              <Key frame="120" value="0.2952" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="20" value="-40.6915" />
                              <Key frame="40" value="-39.7247" />
                              <Key frame="60" value="-40.6915" />
                              <Key frame="80" value="-39.9052" />
                              <Key frame="100" value="-55.3742" />
                              <Key frame="120" value="-39.9052" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="20" value="-10.0173" />
                              <Key frame="40" value="8.5279" />
                              <Key frame="60" value="-10.0173" />
                              <Key frame="80" value="20.2127" />
                              <Key frame="100" value="-3.78175" />
                              <Key frame="120" value="20.2127" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="20" value="-10.193" />
                              <Key frame="40" value="-10.0173" />
                              <Key frame="60" value="-10.193" />
                              <Key frame="80" value="-10.193" />
                              <Key frame="100" value="-10.0173" />
                              <Key frame="120" value="-10.193" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="20" value="80.1549" />
                              <Key frame="40" value="80.2427" />
                              <Key frame="60" value="80.1549" />
                              <Key frame="80" value="80.2476" />
                              <Key frame="100" value="100.023" />
                              <Key frame="120" value="80.2476" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="20" value="78.6607" />
                              <Key frame="40" value="64.2465" />
                              <Key frame="60" value="78.6607" />
                              <Key frame="80" value="77.9624" />
                              <Key frame="100" value="78.4897" />
                              <Key frame="120" value="77.9624" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="20" value="10.7204" />
                              <Key frame="40" value="12.5661" />
                              <Key frame="60" value="10.7204" />
                              <Key frame="80" value="11.9557" />
                              <Key frame="100" value="15.9108" />
                              <Key frame="120" value="11.9557" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="20" value="7.55628" />
                              <Key frame="40" value="7.55628" />
                              <Key frame="60" value="7.55628" />
                              <Key frame="80" value="8.87946" />
                              <Key frame="100" value="4.39699" />
                              <Key frame="120" value="8.87946" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="20" value="-40.1641" />
                              <Key frame="40" value="11.692" />
                              <Key frame="60" value="-40.1641" />
                              <Key frame="80" value="-37.5322" />
                              <Key frame="100" value="-38.8506" />
                              <Key frame="120" value="-37.5322" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="20" value="17.1413" />
                              <Key frame="40" value="15.9987" />
                              <Key frame="60" value="17.1413" />
                              <Key frame="80" value="-9.05525" />
                              <Key frame="100" value="-9.14314" />
                              <Key frame="120" value="-9.05525" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="20" value="60.9993" />
                              <Key frame="40" value="16.2624" />
                              <Key frame="60" value="60.9993" />
                              <Key frame="80" value="60.9944" />
                              <Key frame="100" value="79.6275" />
                              <Key frame="120" value="60.9944" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="20" value="74.0903" />
                              <Key frame="40" value="71.5415" />
                              <Key frame="60" value="74.0903" />
                              <Key frame="80" value="47.4639" />
                              <Key frame="100" value="85.521" />
                              <Key frame="120" value="47.4639" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="20" value="0.2952" />
                              <Key frame="40" value="0.2952" />
                              <Key frame="60" value="0.2952" />
                              <Key frame="80" value="0.2964" />
                              <Key frame="100" value="0.2964" />
                              <Key frame="120" value="0.2964" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="20" value="-39.9052" />
                              <Key frame="40" value="-55.3742" />
                              <Key frame="60" value="-39.9052" />
                              <Key frame="80" value="-40.6915" />
                              <Key frame="100" value="-39.7247" />
                              <Key frame="120" value="-40.6915" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="20" value="-20.2127" />
                              <Key frame="40" value="3.78175" />
                              <Key frame="60" value="-20.2127" />
                              <Key frame="80" value="10.0173" />
                              <Key frame="100" value="-8.5279" />
                              <Key frame="120" value="10.0173" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="20" value="-10.193" />
                              <Key frame="40" value="-10.0173" />
                              <Key frame="60" value="-10.193" />
                              <Key frame="80" value="-10.193" />
                              <Key frame="100" value="-10.0173" />
                              <Key frame="120" value="-10.193" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="20" value="80.2476" />
                              <Key frame="40" value="100.023" />
                              <Key frame="60" value="80.2476" />
                              <Key frame="80" value="80.1549" />
                              <Key frame="100" value="80.2427" />
                              <Key frame="120" value="80.1549" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="20" value="77.9624" />
                              <Key frame="40" value="78.4897" />
                              <Key frame="60" value="77.9624" />
                              <Key frame="80" value="78.6607" />
                              <Key frame="100" value="64.2465" />
                              <Key frame="120" value="78.6607" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="20" value="-11.9557" />
                              <Key frame="40" value="-15.9108" />
                              <Key frame="60" value="-11.9557" />
                              <Key frame="80" value="-10.7204" />
                              <Key frame="100" value="-12.5661" />
                              <Key frame="120" value="-10.7204" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="20" value="-8.87946" />
                              <Key frame="40" value="-4.39699" />
                              <Key frame="60" value="-8.87946" />
                              <Key frame="80" value="-7.55628" />
                              <Key frame="100" value="-7.55628" />
                              <Key frame="120" value="-7.55628" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Counter_marching" id="7" localization="8" tooltip="" x="197" y="249">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.times = 0

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.times += 1
        if self.times > 8:
            self.end()
        else:
            self.repeat()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="repeat" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="end" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                      </Box>
                      <Box name="Go to position Stand (1)" id="6" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="198" y="337">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="368" y="6">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Ensimmäisenä marssitaan paikoillaan." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say (1)" id="3" localization="8" tooltip="Say some text. The text can be localized." x="639" y="9">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Kas näin: nostetaan jalkoja ja käsiä ylös ja alas. Toistakaa mukana." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="503" y="6">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="5" />
                      <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Pushups" id="1" localization="8" tooltip="" x="87" y="558">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="PushUps" id="4" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="304" y="233">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="535">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="42" value="-6.68218" />
                              <Key frame="79" value="-6.68218" />
                              <Key frame="108" value="-6.59429" />
                              <Key frame="149" value="-6.59429" />
                              <Key frame="170" value="-6.77007" />
                              <Key frame="189" value="-6.59429" />
                              <Key frame="206" value="-6.77007" />
                              <Key frame="225" value="-6.59429" />
                              <Key frame="245" value="-6.77007" />
                              <Key frame="264" value="-6.59429" />
                              <Key frame="285" value="-6.77007" />
                              <Key frame="304" value="-6.59429" />
                              <Key frame="342" value="-34.456" />
                              <Key frame="367" value="-30.6766" />
                              <Key frame="392" value="-30.7645" />
                              <Key frame="417" value="-31.204" />
                              <Key frame="442" value="-25.0515" />
                              <Key frame="467" value="-15.4713" />
                              <Key frame="494" value="-12.7467" />
                              <Key frame="535" value="-13.1862" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="42" value="-0.61764" />
                              <Key frame="79" value="-0.61764" />
                              <Key frame="108" value="-0.793436" />
                              <Key frame="149" value="-0.266077" />
                              <Key frame="170" value="2.37068" />
                              <Key frame="189" value="-0.266077" />
                              <Key frame="206" value="2.37068" />
                              <Key frame="225" value="-0.266077" />
                              <Key frame="245" value="2.37068" />
                              <Key frame="264" value="-0.266077" />
                              <Key frame="285" value="2.37068" />
                              <Key frame="304" value="-0.266077" />
                              <Key frame="342" value="-1.49656" />
                              <Key frame="367" value="-1.58445" />
                              <Key frame="392" value="-1.58445" />
                              <Key frame="417" value="-2.02391" />
                              <Key frame="442" value="-1.145" />
                              <Key frame="467" value="-0.353968" />
                              <Key frame="494" value="-1.145" />
                              <Key frame="535" value="-0.705531" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="42" value="-67.8548" />
                              <Key frame="79" value="-68.15" />
                              <Key frame="108" value="-68.15" />
                              <Key frame="149" value="-68.15" />
                              <Key frame="170" value="-68.15" />
                              <Key frame="189" value="-68.15" />
                              <Key frame="206" value="-68.15" />
                              <Key frame="225" value="-68.15" />
                              <Key frame="245" value="-68.15" />
                              <Key frame="264" value="-68.15" />
                              <Key frame="285" value="-68.15" />
                              <Key frame="304" value="-68.15" />
                              <Key frame="342" value="-68.15" />
                              <Key frame="367" value="-68.15" />
                              <Key frame="392" value="-68.15" />
                              <Key frame="417" value="-57.9231" />
                              <Key frame="442" value="-67.2396" />
                              <Key frame="467" value="-68.15" />
                              <Key frame="494" value="-51.3312" />
                              <Key frame="535" value="5.62267" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="42" value="4.3091" />
                              <Key frame="79" value="3.78175" />
                              <Key frame="108" value="-2.89802" />
                              <Key frame="149" value="-2.81013" />
                              <Key frame="170" value="-2.81013" />
                              <Key frame="189" value="-2.81013" />
                              <Key frame="206" value="-2.81013" />
                              <Key frame="225" value="-2.81013" />
                              <Key frame="245" value="-2.81013" />
                              <Key frame="264" value="-2.81013" />
                              <Key frame="285" value="-2.81013" />
                              <Key frame="304" value="-2.81013" />
                              <Key frame="342" value="-0.261268" />
                              <Key frame="367" value="3.78175" />
                              <Key frame="392" value="2.46338" />
                              <Key frame="417" value="-3.33748" />
                              <Key frame="442" value="-3.51326" />
                              <Key frame="467" value="3.78175" />
                              <Key frame="494" value="3.86964" />
                              <Key frame="535" value="-6.58948" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="42" value="-20.74" />
                              <Key frame="79" value="-2.28279" />
                              <Key frame="108" value="-2.28279" />
                              <Key frame="149" value="-3.0738" />
                              <Key frame="170" value="-82.7037" />
                              <Key frame="189" value="-3.0738" />
                              <Key frame="206" value="-82.7037" />
                              <Key frame="225" value="-3.0738" />
                              <Key frame="245" value="-82.7037" />
                              <Key frame="264" value="-3.0738" />
                              <Key frame="285" value="-82.7037" />
                              <Key frame="304" value="-3.0738" />
                              <Key frame="342" value="-2.0191" />
                              <Key frame="367" value="-3.68905" />
                              <Key frame="392" value="-2.81013" />
                              <Key frame="417" value="-2.98591" />
                              <Key frame="442" value="-2.45857" />
                              <Key frame="467" value="-2.0191" />
                              <Key frame="494" value="-2.54646" />
                              <Key frame="535" value="-22.3221" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="42" value="-71.7221" />
                              <Key frame="79" value="-47.8155" />
                              <Key frame="108" value="-38.3232" />
                              <Key frame="149" value="-38.3232" />
                              <Key frame="170" value="-56.341" />
                              <Key frame="189" value="-38.3232" />
                              <Key frame="206" value="-56.341" />
                              <Key frame="225" value="-38.3232" />
                              <Key frame="245" value="-56.341" />
                              <Key frame="264" value="-38.3232" />
                              <Key frame="285" value="-56.341" />
                              <Key frame="304" value="-38.3232" />
                              <Key frame="342" value="-70.2279" />
                              <Key frame="367" value="-71.0189" />
                              <Key frame="392" value="-70.931" />
                              <Key frame="417" value="-71.0189" />
                              <Key frame="442" value="-71.0189" />
                              <Key frame="467" value="-70.7552" />
                              <Key frame="494" value="-69.349" />
                              <Key frame="535" value="-69.5248" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="42" value="0.6256" />
                              <Key frame="79" value="0.0140001" />
                              <Key frame="108" value="0.0244" />
                              <Key frame="149" value="0.0244" />
                              <Key frame="170" value="0.064" />
                              <Key frame="189" value="0.0244" />
                              <Key frame="206" value="0.064" />
                              <Key frame="225" value="0.0244" />
                              <Key frame="245" value="0.064" />
                              <Key frame="264" value="0.0244" />
                              <Key frame="285" value="0.064" />
                              <Key frame="304" value="0.0244" />
                              <Key frame="342" value="0.0648" />
                              <Key frame="367" value="0.0684" />
                              <Key frame="392" value="0.0684" />
                              <Key frame="417" value="0.0684" />
                              <Key frame="442" value="0.0668" />
                              <Key frame="467" value="0.0648" />
                              <Key frame="494" value="0.0707999" />
                              <Key frame="535" value="0.2976" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="42" value="-34.8906" />
                              <Key frame="79" value="-79.8033" />
                              <Key frame="108" value="-90.1745" />
                              <Key frame="149" value="-22.9373" />
                              <Key frame="170" value="-22.9373" />
                              <Key frame="189" value="-22.9373" />
                              <Key frame="206" value="-22.9373" />
                              <Key frame="225" value="-22.9373" />
                              <Key frame="245" value="-22.9373" />
                              <Key frame="264" value="-22.9373" />
                              <Key frame="285" value="-22.9373" />
                              <Key frame="304" value="-22.9373" />
                              <Key frame="342" value="-84.2858" />
                              <Key frame="367" value="-79.3638" />
                              <Key frame="392" value="-72.5962" />
                              <Key frame="417" value="-56.7756" />
                              <Key frame="442" value="-43.9435" />
                              <Key frame="467" value="-36.209" />
                              <Key frame="494" value="-33.3086" />
                              <Key frame="535" value="7.64898" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="42" value="-3.0738" />
                              <Key frame="79" value="26.3699" />
                              <Key frame="108" value="-4.83163" />
                              <Key frame="149" value="-1.22808" />
                              <Key frame="170" value="-1.22808" />
                              <Key frame="189" value="-1.22808" />
                              <Key frame="206" value="-1.22808" />
                              <Key frame="225" value="-1.22808" />
                              <Key frame="245" value="-1.22808" />
                              <Key frame="264" value="-1.22808" />
                              <Key frame="285" value="-1.22808" />
                              <Key frame="304" value="-1.22808" />
                              <Key frame="342" value="-17.4002" />
                              <Key frame="367" value="-10.6325" />
                              <Key frame="392" value="-19.7732" />
                              <Key frame="417" value="-8.69887" />
                              <Key frame="442" value="9.58261" />
                              <Key frame="467" value="-2.37068" />
                              <Key frame="494" value="-0.876518" />
                              <Key frame="535" value="6.41851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="42" value="-21.0037" />
                              <Key frame="79" value="-14.4997" />
                              <Key frame="108" value="-19.5096" />
                              <Key frame="149" value="-3.16169" />
                              <Key frame="170" value="-3.16169" />
                              <Key frame="189" value="-3.16169" />
                              <Key frame="206" value="-3.16169" />
                              <Key frame="225" value="-3.16169" />
                              <Key frame="245" value="-3.16169" />
                              <Key frame="264" value="-3.16169" />
                              <Key frame="285" value="-3.16169" />
                              <Key frame="304" value="-3.16169" />
                              <Key frame="342" value="-28.2987" />
                              <Key frame="367" value="-38.5821" />
                              <Key frame="392" value="-42.3614" />
                              <Key frame="417" value="-34.4511" />
                              <Key frame="442" value="-30.4081" />
                              <Key frame="467" value="-27.1561" />
                              <Key frame="494" value="-27.5956" />
                              <Key frame="535" value="-9.92936" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="42" value="121.04" />
                              <Key frame="79" value="121.025" />
                              <Key frame="108" value="118.212" />
                              <Key frame="149" value="28.7382" />
                              <Key frame="170" value="29.0019" />
                              <Key frame="189" value="28.7382" />
                              <Key frame="206" value="29.0019" />
                              <Key frame="225" value="28.7382" />
                              <Key frame="245" value="29.0019" />
                              <Key frame="264" value="28.7382" />
                              <Key frame="285" value="29.0019" />
                              <Key frame="304" value="28.7382" />
                              <Key frame="342" value="121.025" />
                              <Key frame="367" value="121.04" />
                              <Key frame="392" value="121.04" />
                              <Key frame="417" value="104.765" />
                              <Key frame="442" value="121.04" />
                              <Key frame="467" value="120.937" />
                              <Key frame="494" value="95.6238" />
                              <Key frame="535" value="-5.01224" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="42" value="95.0964" />
                              <Key frame="79" value="32.2539" />
                              <Key frame="108" value="9.5778" />
                              <Key frame="149" value="-0.881327" />
                              <Key frame="170" value="42.713" />
                              <Key frame="189" value="-0.881327" />
                              <Key frame="206" value="42.713" />
                              <Key frame="225" value="-0.881327" />
                              <Key frame="245" value="42.713" />
                              <Key frame="264" value="-0.881327" />
                              <Key frame="285" value="42.713" />
                              <Key frame="304" value="-0.881327" />
                              <Key frame="342" value="21.7068" />
                              <Key frame="367" value="14.8513" />
                              <Key frame="392" value="22.1463" />
                              <Key frame="417" value="71.6294" />
                              <Key frame="442" value="73.4751" />
                              <Key frame="467" value="66.0922" />
                              <Key frame="494" value="67.1469" />
                              <Key frame="535" value="85.3405" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="42" value="12.8298" />
                              <Key frame="79" value="19.7732" />
                              <Key frame="108" value="0.43705" />
                              <Key frame="149" value="0.612832" />
                              <Key frame="170" value="42.0977" />
                              <Key frame="189" value="0.612832" />
                              <Key frame="206" value="42.0977" />
                              <Key frame="225" value="0.612832" />
                              <Key frame="245" value="42.0977" />
                              <Key frame="264" value="0.612832" />
                              <Key frame="285" value="42.0977" />
                              <Key frame="304" value="0.612832" />
                              <Key frame="342" value="0.876518" />
                              <Key frame="367" value="-2.37549" />
                              <Key frame="392" value="-0.00240423" />
                              <Key frame="417" value="16.6091" />
                              <Key frame="442" value="15.3786" />
                              <Key frame="467" value="14.9392" />
                              <Key frame="494" value="12.9177" />
                              <Key frame="535" value="7.3805" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="42" value="2.107" />
                              <Key frame="79" value="46.5802" />
                              <Key frame="108" value="33.4843" />
                              <Key frame="149" value="33.4843" />
                              <Key frame="170" value="87.0104" />
                              <Key frame="189" value="33.4843" />
                              <Key frame="206" value="87.0104" />
                              <Key frame="225" value="33.4843" />
                              <Key frame="245" value="87.0104" />
                              <Key frame="264" value="33.4843" />
                              <Key frame="285" value="87.0104" />
                              <Key frame="304" value="33.4843" />
                              <Key frame="342" value="63.5433" />
                              <Key frame="367" value="56.3362" />
                              <Key frame="392" value="58.2698" />
                              <Key frame="417" value="55.0178" />
                              <Key frame="442" value="54.3147" />
                              <Key frame="467" value="40.6915" />
                              <Key frame="494" value="39.7247" />
                              <Key frame="535" value="8.4352" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="42" value="-67.97" />
                              <Key frame="79" value="-61.7855" />
                              <Key frame="108" value="-67.97" />
                              <Key frame="149" value="-67.97" />
                              <Key frame="170" value="-67.9379" />
                              <Key frame="189" value="-67.97" />
                              <Key frame="206" value="-67.9379" />
                              <Key frame="225" value="-67.97" />
                              <Key frame="245" value="-67.9379" />
                              <Key frame="264" value="-67.97" />
                              <Key frame="285" value="-67.9379" />
                              <Key frame="304" value="-67.97" />
                              <Key frame="342" value="-67.97" />
                              <Key frame="367" value="-13.0935" />
                              <Key frame="392" value="40.8721" />
                              <Key frame="417" value="47.2003" />
                              <Key frame="442" value="-29.0019" />
                              <Key frame="467" value="-67.85" />
                              <Key frame="494" value="-44.4708" />
                              <Key frame="535" value="5.89115" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="42" value="-2.107" />
                              <Key frame="79" value="8.17634" />
                              <Key frame="108" value="-2.54646" />
                              <Key frame="149" value="1.67234" />
                              <Key frame="170" value="1.67234" />
                              <Key frame="189" value="1.67234" />
                              <Key frame="206" value="1.67234" />
                              <Key frame="225" value="1.67234" />
                              <Key frame="245" value="1.67234" />
                              <Key frame="264" value="1.67234" />
                              <Key frame="285" value="1.67234" />
                              <Key frame="304" value="1.67234" />
                              <Key frame="342" value="0.266077" />
                              <Key frame="367" value="11.8678" />
                              <Key frame="392" value="5.3638" />
                              <Key frame="417" value="-6.58948" />
                              <Key frame="442" value="13.274" />
                              <Key frame="467" value="-0.788627" />
                              <Key frame="494" value="3.51807" />
                              <Key frame="535" value="4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="42" value="15.9987" />
                              <Key frame="79" value="17.0534" />
                              <Key frame="108" value="11.692" />
                              <Key frame="149" value="13.274" />
                              <Key frame="170" value="77.7866" />
                              <Key frame="189" value="13.274" />
                              <Key frame="206" value="77.7866" />
                              <Key frame="225" value="13.274" />
                              <Key frame="245" value="77.7866" />
                              <Key frame="264" value="13.274" />
                              <Key frame="285" value="77.7866" />
                              <Key frame="304" value="13.274" />
                              <Key frame="342" value="2.1997" />
                              <Key frame="367" value="3.34228" />
                              <Key frame="392" value="3.25439" />
                              <Key frame="417" value="3.69386" />
                              <Key frame="442" value="3.43018" />
                              <Key frame="467" value="2" />
                              <Key frame="494" value="2.46338" />
                              <Key frame="535" value="23.5574" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="42" value="67.7621" />
                              <Key frame="79" value="67.6742" />
                              <Key frame="108" value="66.268" />
                              <Key frame="149" value="69.4321" />
                              <Key frame="170" value="56.7756" />
                              <Key frame="189" value="69.4321" />
                              <Key frame="206" value="56.7756" />
                              <Key frame="225" value="69.4321" />
                              <Key frame="245" value="56.7756" />
                              <Key frame="264" value="69.4321" />
                              <Key frame="285" value="56.7756" />
                              <Key frame="304" value="69.4321" />
                              <Key frame="342" value="66.3559" />
                              <Key frame="367" value="67.9379" />
                              <Key frame="392" value="67.9379" />
                              <Key frame="417" value="67.6742" />
                              <Key frame="442" value="67.4984" />
                              <Key frame="467" value="68.1137" />
                              <Key frame="494" value="67.4106" />
                              <Key frame="535" value="66.9711" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="42" value="0.7316" />
                              <Key frame="79" value="0.7316" />
                              <Key frame="108" value="0.2236" />
                              <Key frame="149" value="0.224" />
                              <Key frame="170" value="0.1612" />
                              <Key frame="189" value="0.224" />
                              <Key frame="206" value="0.1612" />
                              <Key frame="225" value="0.224" />
                              <Key frame="245" value="0.1612" />
                              <Key frame="264" value="0.224" />
                              <Key frame="285" value="0.1612" />
                              <Key frame="304" value="0.224" />
                              <Key frame="342" value="0.1528" />
                              <Key frame="367" value="0.1572" />
                              <Key frame="392" value="0.1572" />
                              <Key frame="417" value="0.1572" />
                              <Key frame="442" value="0.1556" />
                              <Key frame="467" value="0.1528" />
                              <Key frame="494" value="0.1572" />
                              <Key frame="535" value="0.306" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="42" value="-34.5439" />
                              <Key frame="79" value="-27.0731" />
                              <Key frame="108" value="-90.3551" />
                              <Key frame="149" value="-23.1179" />
                              <Key frame="170" value="-23.4695" />
                              <Key frame="189" value="-23.1179" />
                              <Key frame="206" value="-23.4695" />
                              <Key frame="225" value="-23.1179" />
                              <Key frame="245" value="-23.4695" />
                              <Key frame="264" value="-23.1179" />
                              <Key frame="285" value="-23.4695" />
                              <Key frame="304" value="-23.1179" />
                              <Key frame="342" value="-85.7847" />
                              <Key frame="367" value="-94.7497" />
                              <Key frame="392" value="-93.9586" />
                              <Key frame="417" value="-72.5131" />
                              <Key frame="442" value="-71.4584" />
                              <Key frame="467" value="-37.708" />
                              <Key frame="494" value="-35.5107" />
                              <Key frame="535" value="7.64417" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="42" value="-0.612832" />
                              <Key frame="79" value="21.0085" />
                              <Key frame="108" value="17.9323" />
                              <Key frame="149" value="-7.81997" />
                              <Key frame="170" value="-7.81997" />
                              <Key frame="189" value="-7.81997" />
                              <Key frame="206" value="-7.81997" />
                              <Key frame="225" value="-7.81997" />
                              <Key frame="245" value="-7.81997" />
                              <Key frame="264" value="-7.81997" />
                              <Key frame="285" value="-7.81997" />
                              <Key frame="304" value="-7.81997" />
                              <Key frame="342" value="15.2077" />
                              <Key frame="367" value="16.0866" />
                              <Key frame="392" value="16.8776" />
                              <Key frame="417" value="16.5261" />
                              <Key frame="442" value="-12.3903" />
                              <Key frame="467" value="-2.37068" />
                              <Key frame="494" value="-1.22808" />
                              <Key frame="535" value="-3.51326" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="42" value="-21.0037" />
                              <Key frame="79" value="-14.4997" />
                              <Key frame="108" value="-19.5096" />
                              <Key frame="149" value="-3.16169" />
                              <Key frame="170" value="-3.16169" />
                              <Key frame="189" value="-3.16169" />
                              <Key frame="206" value="-3.16169" />
                              <Key frame="225" value="-3.16169" />
                              <Key frame="245" value="-3.16169" />
                              <Key frame="264" value="-3.16169" />
                              <Key frame="285" value="-3.16169" />
                              <Key frame="304" value="-3.16169" />
                              <Key frame="342" value="-28.2987" />
                              <Key frame="367" value="-38.5821" />
                              <Key frame="392" value="-42.3614" />
                              <Key frame="417" value="-34.4511" />
                              <Key frame="442" value="-30.4081" />
                              <Key frame="467" value="-27.1561" />
                              <Key frame="494" value="-27.5956" />
                              <Key frame="535" value="-9.92936" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="42" value="121.04" />
                              <Key frame="79" value="69.1732" />
                              <Key frame="108" value="118.305" />
                              <Key frame="149" value="29.4461" />
                              <Key frame="170" value="29.7977" />
                              <Key frame="189" value="29.4461" />
                              <Key frame="206" value="29.7977" />
                              <Key frame="225" value="29.4461" />
                              <Key frame="245" value="29.7977" />
                              <Key frame="264" value="29.4461" />
                              <Key frame="285" value="29.7977" />
                              <Key frame="304" value="29.4461" />
                              <Key frame="342" value="121.04" />
                              <Key frame="367" value="91.6735" />
                              <Key frame="392" value="34.2802" />
                              <Key frame="417" value="12.0436" />
                              <Key frame="442" value="113.383" />
                              <Key frame="467" value="121.04" />
                              <Key frame="494" value="92.8161" />
                              <Key frame="535" value="-5.09532" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="42" value="92.8161" />
                              <Key frame="79" value="92.6403" />
                              <Key frame="108" value="18.2839" />
                              <Key frame="149" value="2.37549" />
                              <Key frame="170" value="34.7196" />
                              <Key frame="189" value="2.37549" />
                              <Key frame="206" value="34.7196" />
                              <Key frame="225" value="2.37549" />
                              <Key frame="245" value="34.7196" />
                              <Key frame="264" value="2.37549" />
                              <Key frame="285" value="34.7196" />
                              <Key frame="304" value="2.37549" />
                              <Key frame="342" value="20.9206" />
                              <Key frame="367" value="74.2709" />
                              <Key frame="392" value="74.4467" />
                              <Key frame="417" value="74.5346" />
                              <Key frame="442" value="74.8862" />
                              <Key frame="467" value="65.306" />
                              <Key frame="494" value="67.1517" />
                              <Key frame="535" value="84.6421" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="42" value="-10.8131" />
                              <Key frame="79" value="-10.4615" />
                              <Key frame="108" value="1.31597" />
                              <Key frame="149" value="1.31597" />
                              <Key frame="170" value="-40.1689" />
                              <Key frame="189" value="1.31597" />
                              <Key frame="206" value="-40.1689" />
                              <Key frame="225" value="1.31597" />
                              <Key frame="245" value="-40.1689" />
                              <Key frame="264" value="1.31597" />
                              <Key frame="285" value="-40.1689" />
                              <Key frame="304" value="1.31597" />
                              <Key frame="342" value="0.876518" />
                              <Key frame="367" value="-21.6238" />
                              <Key frame="392" value="-22.7664" />
                              <Key frame="417" value="-19.6902" />
                              <Key frame="442" value="-16.9655" />
                              <Key frame="467" value="-11.692" />
                              <Key frame="494" value="-10.3736" />
                              <Key frame="535" value="-5.80326" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="42" value="5.97423" />
                              <Key frame="79" value="5.97423" />
                              <Key frame="108" value="-65.0423" />
                              <Key frame="149" value="-64.9544" />
                              <Key frame="170" value="-61.0872" />
                              <Key frame="189" value="-64.9544" />
                              <Key frame="206" value="-61.0872" />
                              <Key frame="225" value="-64.9544" />
                              <Key frame="245" value="-61.0872" />
                              <Key frame="264" value="-64.9544" />
                              <Key frame="285" value="-61.0872" />
                              <Key frame="304" value="-64.9544" />
                              <Key frame="342" value="-65.2181" />
                              <Key frame="367" value="-65.5696" />
                              <Key frame="392" value="-65.5696" />
                              <Key frame="417" value="-65.2181" />
                              <Key frame="442" value="-64.3392" />
                              <Key frame="467" value="-49.1339" />
                              <Key frame="494" value="-48.1671" />
                              <Key frame="535" value="4.12851" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Go to position Stand" id="9" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="299" y="139">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Go to position Stand (1)" id="16" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="309" y="324">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="4" />
                      <Link inputowner="16" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Crouch" id="4" localization="8" tooltip="" x="214" y="564">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Crouch" id="2" localization="8" tooltip="" x="328" y="204">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[SPEED = 0.5

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.posture = self.session().service('ALRobotPosture')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.posture.goToPosture("Stand", SPEED)
        i = 0
        times = 5
        while i < times:
            self.logger.info(i)
            self.posture.goToPosture("Crouch", SPEED)
            self.posture.goToPosture("Stand", SPEED)
            i += 1

        self.posture.stopMove()
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Go to position Stand" id="10" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="319" y="111">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Go to position Stand (1)" id="17" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="329" y="294">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" />
                      <Link inputowner="17" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="17" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Hiproll" id="2" localization="8" tooltip="" x="336" y="568">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Hips" id="3" localization="8" tooltip="" x="337" y="178">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="200">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="50" value="-9.58261" />
                              <Key frame="100" value="-9.58261" />
                              <Key frame="150" value="-9.58261" />
                              <Key frame="200" value="-9.58261" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="50" value="-0.705531" />
                              <Key frame="100" value="-0.705531" />
                              <Key frame="150" value="-0.705531" />
                              <Key frame="200" value="0.705531" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="50" value="-19.1628" />
                              <Key frame="100" value="-6.8" />
                              <Key frame="150" value="6.8" />
                              <Key frame="200" value="-6.6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="50" value="-6.06212" />
                              <Key frame="100" value="-22.8" />
                              <Key frame="150" value="-5.1" />
                              <Key frame="200" value="3.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="50" value="-70.3989" />
                              <Key frame="100" value="-69.5" />
                              <Key frame="150" value="-72" />
                              <Key frame="200" value="-69.5" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="50" value="3.86484" />
                              <Key frame="100" value="3.24959" />
                              <Key frame="150" value="2.2" />
                              <Key frame="200" value="3.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="50" value="0.2208" />
                              <Key frame="100" value="0.2208" />
                              <Key frame="150" value="0.23" />
                              <Key frame="200" value="0.22" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="50" value="28.0399" />
                              <Key frame="100" value="5.6" />
                              <Key frame="150" value="-24.5" />
                              <Key frame="200" value="6.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="50" value="6.85796" />
                              <Key frame="100" value="32.9" />
                              <Key frame="150" value="6.85796" />
                              <Key frame="200" value="-8.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="50" value="-9.48991" />
                              <Key frame="100" value="-9.9" />
                              <Key frame="150" value="-9.5" />
                              <Key frame="200" value="-9.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="50" value="9.5778" />
                              <Key frame="100" value="7.7" />
                              <Key frame="150" value="6.7" />
                              <Key frame="200" value="7.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="50" value="86.6588" />
                              <Key frame="100" value="81.0338" />
                              <Key frame="150" value="79.9" />
                              <Key frame="200" value="82" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="50" value="45.3497" />
                              <Key frame="100" value="42.0977" />
                              <Key frame="150" value="43.1" />
                              <Key frame="200" value="43.6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="50" value="-87.8941" />
                              <Key frame="100" value="-88.5973" />
                              <Key frame="150" value="-87.2" />
                              <Key frame="200" value="-87.6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="50" value="-19.4217" />
                              <Key frame="100" value="-6.6" />
                              <Key frame="150" value="6.8" />
                              <Key frame="200" value="-6.8" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="50" value="5.97904" />
                              <Key frame="100" value="-3.9" />
                              <Key frame="150" value="5.1" />
                              <Key frame="200" value="22.8" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="50" value="71.0189" />
                              <Key frame="100" value="69.5" />
                              <Key frame="150" value="72" />
                              <Key frame="200" value="69.5" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="50" value="-3.86964" />
                              <Key frame="100" value="-3.3" />
                              <Key frame="150" value="-2.2" />
                              <Key frame="200" value="-3.24959" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="50" value="0.2164" />
                              <Key frame="100" value="0.22" />
                              <Key frame="150" value="0.23" />
                              <Key frame="200" value="0.2208" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="50" value="28.2108" />
                              <Key frame="100" value="6.9" />
                              <Key frame="150" value="-24.5" />
                              <Key frame="200" value="5.6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="50" value="-6.76526" />
                              <Key frame="100" value="8.3" />
                              <Key frame="150" value="-6.67737" />
                              <Key frame="200" value="-32.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="50" value="-9.48991" />
                              <Key frame="100" value="-9.9" />
                              <Key frame="150" value="-9.5" />
                              <Key frame="200" value="-9.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="50" value="10.1978" />
                              <Key frame="100" value="7.7" />
                              <Key frame="150" value="6.7" />
                              <Key frame="200" value="7.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="50" value="86.7515" />
                              <Key frame="100" value="82" />
                              <Key frame="150" value="79.9" />
                              <Key frame="200" value="81.0338" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="50" value="-44.6514" />
                              <Key frame="100" value="-43.6" />
                              <Key frame="150" value="-43.1" />
                              <Key frame="200" value="-42.0977" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="50" value="87.6256" />
                              <Key frame="100" value="87.6" />
                              <Key frame="150" value="87.2" />
                              <Key frame="200" value="88.5973" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Go to position Stand" id="11" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="327" y="81">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Counter_hiproll" id="12" localization="8" tooltip="" x="335" y="273">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.times = 0

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.times += 1
        if self.times > 5:
            self.end()
        else:
            self.repeat()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="repeat" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="end" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                      </Box>
                      <Box name="Go to position Stand (1)" id="13" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="341" y="359">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Compliment" id="6" localization="8" tooltip="" x="632" y="359">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        compliments = ["hienoa", "loistavaa", "mainiota", "upeaa", "hyvin meni", "hyvä hyvä"]
        random.seed(1)
        self.tts.say(random.choice(compliments))
        self.tts.say("Sitten seuraava liike")

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="501" y="69">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Tässä liikkeessä pyöritetään lantiota. Kas näin." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say (1)" id="1" localization="8" tooltip="Say some text. The text can be localized." x="758" y="56">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Pyöritellään käsiä eteenpäin ja taaksepäin. Toistakaa mukana." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay" id="4" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="629" y="60">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Link inputowner="12" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="12" indexofoutput="4" />
                      <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="5" />
                      <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="11" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Compliment" id="6" localization="8" tooltip="" x="488" y="319">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        compliments = ["hienoa", "loistavaa", "mainiota", "upeaa", "hyvin meni", "hyvä hyvä"]
        random.seed(1)
        i = random.randint(0,5)
        i = random.randint(0,5)
        i = random.randint(0,5)
        self.tts.say(compliments[i])
        self.tts.say("Sitten seuraava liike")

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="ReachUp" id="7" localization="8" tooltip="" x="490" y="171">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Go to position Stand" id="14" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="169" y="40">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="ReachUp" id="15" localization="8" tooltip="" x="176" y="132">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="247">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-14.4" />
                              <Key frame="23" value="-65.0375" />
                              <Key frame="60" value="-7.1" />
                              <Key frame="200" value="-7.1" />
                              <Key frame="230" value="-65.0375" />
                              <Key frame="247" value="-14.4" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-81.9" />
                              <Key frame="23" value="-81.3901" />
                              <Key frame="230" value="-81.3901" />
                              <Key frame="247" value="-81.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.3" />
                              <Key frame="23" value="0.2924" />
                              <Key frame="60" value="1" />
                              <Key frame="200" value="1" />
                              <Key frame="230" value="0.2924" />
                              <Key frame="247" value="0.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="83.1" />
                              <Key frame="23" value="39.1094" />
                              <Key frame="60" value="-92.6" />
                              <Key frame="200" value="-92.6" />
                              <Key frame="230" value="39.1094" />
                              <Key frame="247" value="83.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="13.7" />
                              <Key frame="23" value="-4.57277" />
                              <Key frame="60" value="-4.5" />
                              <Key frame="200" value="-4.5" />
                              <Key frame="230" value="-4.57277" />
                              <Key frame="247" value="13.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="6" />
                              <Key frame="23" value="6.76526" />
                              <Key frame="230" value="6.76526" />
                              <Key frame="247" value="6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="22.5" />
                              <Key frame="23" value="65.2181" />
                              <Key frame="60" value="7.1" />
                              <Key frame="200" value="7.1" />
                              <Key frame="230" value="65.2181" />
                              <Key frame="247" value="22.5" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.5" />
                              <Key frame="23" value="66.1801" />
                              <Key frame="230" value="66.1801" />
                              <Key frame="247" value="68.5" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.3" />
                              <Key frame="23" value="0.2896" />
                              <Key frame="60" value="1" />
                              <Key frame="200" value="1" />
                              <Key frame="230" value="0.2896" />
                              <Key frame="247" value="0.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="83.1" />
                              <Key frame="23" value="39.0263" />
                              <Key frame="60" value="-92.6" />
                              <Key frame="200" value="-92.6" />
                              <Key frame="230" value="39.0263" />
                              <Key frame="247" value="83.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-13" />
                              <Key frame="23" value="3.86484" />
                              <Key frame="60" value="4.5" />
                              <Key frame="200" value="4.5" />
                              <Key frame="230" value="3.86484" />
                              <Key frame="247" value="-13" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="3.5" />
                              <Key frame="23" value="3.51326" />
                              <Key frame="230" value="3.51326" />
                              <Key frame="247" value="3.5" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Go to position Stand (1)" id="18" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="184" y="314">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Counter_reaching_up" id="19" localization="8" tooltip="" x="177" y="223">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.times = 0

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.times += 1
        if self.times > 5:
            self.end()
        else:
            self.repeat()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="repeat" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="end" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                      </Box>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="346" y="30">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Tässä liikkeessä ojennetaan kehoa mahdollisimman ylös. Kas näin." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say (1)" id="1" localization="8" tooltip="Say some text. The text can be localized." x="564" y="37">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Nostetaan kädet kohti kattoa ja noustaan varpaille." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay" id="3" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="453" y="34">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Delay (1)" id="4" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="674" y="42">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Say (2)" id="5" localization="8" tooltip="Say some text. The text can be localized." x="781" y="45">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Toistakaa mukana. " default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay (2)" id="6" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="59" y="20">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Link inputowner="19" indexofinput="2" outputowner="15" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="19" indexofoutput="4" />
                      <Link inputowner="18" indexofinput="2" outputowner="19" indexofoutput="5" />
                      <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="18" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="FrontBend" id="9" localization="8" tooltip="" x="249" y="170">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Go to position Stand" id="5" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="300" y="42">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="FrontBend_counter" id="7" localization="8" tooltip="" x="299" y="277">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.times = 0

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.times += 1
        if self.times > 5:
            self.end()
        else:
            self.repeat()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="repeat" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="end" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                      </Box>
                      <Box name="Go to position Stand (1)" id="6" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="313" y="423">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="480" y="48">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Tässä liikkeessä taivutetaan vartaloa eteenpäin" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say (1)" id="3" localization="8" tooltip="Say some text. The text can be localized." x="751" y="51">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Kas näin: otetaan leveä haara-asento ja kosketetaan käsillä varpaita." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="615" y="48">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="FrontBend" id="1" localization="8" tooltip="" x="295" y="145">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="247">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="25" value="-9.40682" />
                              <Key frame="80" value="-8.08845" />
                              <Key frame="200" value="-8.08845" />
                              <Key frame="247" value="-9.40682" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="25" value="0.261268" />
                              <Key frame="80" value="-0.353968" />
                              <Key frame="200" value="-0.353968" />
                              <Key frame="247" value="0.261268" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="25" value="-6.77007" />
                              <Key frame="80" value="20.0369" />
                              <Key frame="200" value="20.0369" />
                              <Key frame="247" value="-6.77007" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="25" value="-5.88634" />
                              <Key frame="80" value="-7.46839" />
                              <Key frame="200" value="-7.46839" />
                              <Key frame="247" value="-5.88634" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="25" value="-23.201" />
                              <Key frame="80" value="-4.2164" />
                              <Key frame="200" value="-4.2164" />
                              <Key frame="247" value="-22.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="25" value="-28.6551" />
                              <Key frame="80" value="-28.6551" />
                              <Key frame="200" value="-28.6551" />
                              <Key frame="247" value="-28.6551" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="25" value="0.2896" />
                              <Key frame="80" value="1" />
                              <Key frame="200" value="1" />
                              <Key frame="247" value="0.2896" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="25" value="7.4732" />
                              <Key frame="80" value="-77.3423" />
                              <Key frame="200" value="-77.3423" />
                              <Key frame="247" value="7.4732" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="25" value="7.03374" />
                              <Key frame="80" value="6.85796" />
                              <Key frame="200" value="6.85796" />
                              <Key frame="247" value="7.03374" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="25" value="-9.66569" />
                              <Key frame="80" value="-10.1051" />
                              <Key frame="200" value="-10.1051" />
                              <Key frame="247" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="25" value="7.73207" />
                              <Key frame="80" value="4.2164" />
                              <Key frame="200" value="4.2164" />
                              <Key frame="247" value="7.73207" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="25" value="56.0725" />
                              <Key frame="80" value="10.8083" />
                              <Key frame="200" value="10.8083" />
                              <Key frame="247" value="56.0725" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="25" value="12.5661" />
                              <Key frame="80" value="7.64417" />
                              <Key frame="200" value="7.64417" />
                              <Key frame="247" value="12.5661" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="25" value="21.4432" />
                              <Key frame="80" value="21.4432" />
                              <Key frame="200" value="21.4432" />
                              <Key frame="247" value="21.4432" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="25" value="-6.94104" />
                              <Key frame="80" value="19.3386" />
                              <Key frame="200" value="19.3386" />
                              <Key frame="247" value="-6.94104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="25" value="6.06693" />
                              <Key frame="80" value="7.91266" />
                              <Key frame="200" value="7.91266" />
                              <Key frame="247" value="6.06693" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="25" value="22.4148" />
                              <Key frame="80" value="5" />
                              <Key frame="200" value="3.78175" />
                              <Key frame="247" value="22.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="25" value="28.6503" />
                              <Key frame="80" value="29.4" />
                              <Key frame="200" value="28.6503" />
                              <Key frame="247" value="28.6503" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="25" value="0.288" />
                              <Key frame="80" value="1" />
                              <Key frame="200" value="1" />
                              <Key frame="247" value="0.288" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="25" value="7.3805" />
                              <Key frame="80" value="-78.1382" />
                              <Key frame="200" value="-78.1382" />
                              <Key frame="247" value="7.3805" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="25" value="-7.29261" />
                              <Key frame="80" value="-6.76526" />
                              <Key frame="200" value="-6.76526" />
                              <Key frame="247" value="-7.29261" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="25" value="-9.66569" />
                              <Key frame="80" value="-10.1051" />
                              <Key frame="200" value="-10.1051" />
                              <Key frame="247" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="25" value="7.4732" />
                              <Key frame="80" value="4.04543" />
                              <Key frame="200" value="4.04543" />
                              <Key frame="247" value="7.4732" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="25" value="55.9894" />
                              <Key frame="80" value="12.3" />
                              <Key frame="200" value="10.3736" />
                              <Key frame="247" value="55.9894" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="25" value="-12.5709" />
                              <Key frame="80" value="-6.9" />
                              <Key frame="200" value="-7.64898" />
                              <Key frame="247" value="-12.5709" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="25" value="-21.6238" />
                              <Key frame="80" value="-16.5" />
                              <Key frame="200" value="-21.6238" />
                              <Key frame="247" value="-21.6238" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Delay (1)" id="4" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="120" y="39">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="5" />
                      <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="14" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Disable AutonomousLife" id="11" localization="8" tooltip="" x="100" y="26">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.autolife = self.session().service('ALAutonomousLife')
        self.posture = self.session().service('ALRobotPosture')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        if self.autolife.getState() != "disabled":
            self.autolife.setState("disabled")

        self.posture.goToPosture("Stand", 0.6)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="ArmCircles" id="3" localization="8" tooltip="" x="371" y="171">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Go to position Stand" id="14" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="170" y="77">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="ArmCircles" id="15" localization="8" tooltip="" x="177" y="169">
                        <bitmap>media/images/box/box-timeLine.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="245">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-14.4" />
                              <Key frame="60" value="-2" />
                              <Key frame="205" value="-2" />
                              <Key frame="245" value="-14.4" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-81.9" />
                              <Key frame="60" value="57.5" />
                              <Key frame="97" value="-60.2" />
                              <Key frame="112" value="-119.5" />
                              <Key frame="135" value="-119.5" />
                              <Key frame="155" value="-60.2" />
                              <Key frame="205" value="57.5" />
                              <Key frame="245" value="-81.9" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.3" />
                              <Key frame="60" value="0.3" />
                              <Key frame="205" value="0.3" />
                              <Key frame="245" value="0.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="83.1" />
                              <Key frame="30" value="7.5" />
                              <Key frame="60" value="-77.3" />
                              <Key frame="72" value="-102.3" />
                              <Key frame="97" value="60.2" />
                              <Key frame="112" value="100.4" />
                              <Key frame="124" value="84.5" />
                              <Key frame="135" value="100.4" />
                              <Key frame="155" value="60.2" />
                              <Key frame="181" value="-102.3" />
                              <Key frame="205" value="-77.3" />
                              <Key frame="245" value="83.1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="13.7" />
                              <Key frame="60" value="8.9" />
                              <Key frame="97" value="71.7" />
                              <Key frame="112" value="23.6" />
                              <Key frame="124" value="12.4" />
                              <Key frame="135" value="23.6" />
                              <Key frame="155" value="71.7" />
                              <Key frame="205" value="8.9" />
                              <Key frame="245" value="13.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="6" />
                              <Key frame="60" value="5.4" />
                              <Key frame="205" value="5.4" />
                              <Key frame="245" value="6" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="22.8" />
                              <Key frame="60" value="2" />
                              <Key frame="124" value="22.8" />
                              <Key frame="205" value="2" />
                              <Key frame="245" value="22.8" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.7" />
                              <Key frame="60" value="-58.3" />
                              <Key frame="97" value="60.2" />
                              <Key frame="112" value="119.5" />
                              <Key frame="124" value="68.7" />
                              <Key frame="135" value="119.5" />
                              <Key frame="155" value="60.2" />
                              <Key frame="205" value="-58.3" />
                              <Key frame="245" value="68.7" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.3" />
                              <Key frame="124" value="0.3" />
                              <Key frame="245" value="0.3" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="84.5" />
                              <Key frame="30" value="7.5" />
                              <Key frame="60" value="-79.3" />
                              <Key frame="72" value="-102.3" />
                              <Key frame="97" value="60.2" />
                              <Key frame="112" value="100.4" />
                              <Key frame="124" value="84.5" />
                              <Key frame="135" value="100.4" />
                              <Key frame="155" value="60.2" />
                              <Key frame="181" value="-102.3" />
                              <Key frame="205" value="-79.3" />
                              <Key frame="245" value="84.5" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.4" />
                              <Key frame="60" value="-8.9" />
                              <Key frame="97" value="-71.7" />
                              <Key frame="112" value="-23.6" />
                              <Key frame="124" value="-12.4" />
                              <Key frame="135" value="-23.6" />
                              <Key frame="155" value="-71.7" />
                              <Key frame="205" value="-8.9" />
                              <Key frame="245" value="-12.4" />
                            </ActuatorCurve>
                            <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="4" />
                              <Key frame="124" value="4" />
                              <Key frame="245" value="4" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Go to position Stand (1)" id="18" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="185" y="351">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Counter_arm_circles" id="19" localization="8" tooltip="" x="178" y="260">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.times = 0

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.times += 1
        if self.times > 4:
            self.end()
        else:
            self.repeat()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="repeat" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="end" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                      </Box>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="372" y="90">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Tässä liikkeessä pyöritetään käsiä. Kas näin." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Say (1)" id="1" localization="8" tooltip="Say some text. The text can be localized." x="629" y="77">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Pyöritellään käsiä eteenpäin ja taaksepäin. Toistakaa mukana." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Delay" id="3" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="500" y="81">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Delay (1)" id="4" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="58" y="37">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Link inputowner="19" indexofinput="2" outputowner="15" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="19" indexofoutput="4" />
                      <Link inputowner="18" indexofinput="2" outputowner="19" indexofoutput="5" />
                      <Link inputowner="2" indexofinput="2" outputowner="14" indexofoutput="4" />
                      <Link inputowner="15" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="18" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="14" indexofinput="2" outputowner="4" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Compliment (1)" id="12" localization="8" tooltip="" x="620" y="324">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        compliments = ["hienoa", "loistavaa", "mainiota", "upeaa", "hyvin meni", "hyvä hyvä"]
        random.seed(1)
        i = random.randint(0,5)
        i = random.randint(0,5)
        i = random.randint(0,5)
        self.tts.say(compliments[i])
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Animated Say" id="13" localization="8" tooltip="Say some text with animations. The text can be localized." x="257" y="16">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Hei kaikki! Minun nimeni on Nao. Minä olen robotti. Tykkään harrastaa liikuntaa, vaikka olenkin vähän kankea. Yritän aina parhaani. &#x0A;Minä ohjaan teille nyt alkulämmittelyjumpan. Näytän ensin tehtävän liikkeen itse, jonka jälkeen toistamme sen yhdessä. &#x0A;" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                <Choice value="disabled" />
                <Choice value="random" />
                <Choice value="contextual" />
              </Parameter>
              <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Animated Say (1)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="756" y="317">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Huh huh. Olipas virkistävä jumppa. Kiitos kaikille osallistumisesta. Tämä osuus päättyy nyt. Nyt lepäilen itse sillä välin kun teillä on toista ohjelmaa" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                <Choice value="disabled" />
                <Choice value="random" />
                <Choice value="contextual" />
              </Parameter>
              <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Rest" id="10" localization="8" tooltip="" x="1019" y="162">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.posture = self.session().service("ALRobotPosture")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.posture.goToPosture("Crouch", 0.6)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Sign_thanks" id="14" localization="8" tooltip="" x="1029" y="285">
              <bitmap>media/images/box/box-timeLine.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="100">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                    <Key frame="1" value="-8.4" />
                    <Key frame="24" value="-8.44001" />
                    <Key frame="32" value="-3.3" />
                    <Key frame="40" value="-8.44001" />
                    <Key frame="51" value="-13.5377" />
                    <Key frame="60" value="-8.44001" />
                    <Key frame="75" value="-8.44001" />
                    <Key frame="100" value="-8.44001" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                    <Key frame="1" value="1" />
                    <Key frame="24" value="0.964409" />
                    <Key frame="32" value="13" />
                    <Key frame="40" value="0.964409" />
                    <Key frame="51" value="-19.6902" />
                    <Key frame="60" value="0.964409" />
                    <Key frame="75" value="0.964409" />
                    <Key frame="100" value="0.964409" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                    <Key frame="1" value="5.62267" />
                    <Key frame="24" value="5.62267" />
                    <Key frame="40" value="5.62267" />
                    <Key frame="51" value="5.62267" />
                    <Key frame="60" value="5.62267" />
                    <Key frame="75" value="5.62267" />
                    <Key frame="100" value="5.62267" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                    <Key frame="1" value="-5.97423" />
                    <Key frame="24" value="-5.97423" />
                    <Key frame="40" value="-5.97423" />
                    <Key frame="51" value="-5.97423" />
                    <Key frame="60" value="-5.97423" />
                    <Key frame="75" value="-5.97423" />
                    <Key frame="100" value="-5.97423" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="LElbowRoll" mute="0" unit="0">
                    <Key frame="1" value="-24.6073" />
                    <Key frame="24" value="-75.0571" />
                    <Key frame="32" value="-67.7" />
                    <Key frame="40" value="-49.3" />
                    <Key frame="51" value="-45.965" />
                    <Key frame="60" value="-27.9" />
                    <Key frame="75" value="-27.9" />
                    <Key frame="100" value="-26.0135" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="LElbowYaw" mute="0" unit="0">
                    <Key frame="1" value="-67.3275" />
                    <Key frame="24" value="-5.53958" />
                    <Key frame="40" value="-19.9" />
                    <Key frame="51" value="-22.239" />
                    <Key frame="60" value="-46.5" />
                    <Key frame="75" value="-46.5" />
                    <Key frame="100" value="-66.097" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="LHand" mute="0" unit="1">
                    <Key frame="1" value="0.3088" />
                    <Key frame="24" value="0.996" />
                    <Key frame="40" value="1" />
                    <Key frame="51" value="0.9888" />
                    <Key frame="60" value="0.99" />
                    <Key frame="75" value="0.99" />
                    <Key frame="100" value="0.3228" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                    <Key frame="1" value="7.29742" />
                    <Key frame="24" value="7.29742" />
                    <Key frame="40" value="7.29742" />
                    <Key frame="51" value="7.29742" />
                    <Key frame="60" value="7.29742" />
                    <Key frame="75" value="7.29742" />
                    <Key frame="100" value="7.29742" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                    <Key frame="1" value="6.77007" />
                    <Key frame="24" value="6.77007" />
                    <Key frame="40" value="6.77007" />
                    <Key frame="51" value="6.77007" />
                    <Key frame="60" value="6.77007" />
                    <Key frame="75" value="6.77007" />
                    <Key frame="100" value="6.77007" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                    <Key frame="1" value="-9.92936" />
                    <Key frame="24" value="-9.92936" />
                    <Key frame="40" value="-9.92936" />
                    <Key frame="51" value="-9.92936" />
                    <Key frame="60" value="-9.92936" />
                    <Key frame="75" value="-9.92936" />
                    <Key frame="100" value="-9.92936" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                    <Key frame="1" value="-5.3638" />
                    <Key frame="24" value="-5.3638" />
                    <Key frame="40" value="-5.3638" />
                    <Key frame="51" value="-5.3638" />
                    <Key frame="60" value="-5.3638" />
                    <Key frame="75" value="-5.3638" />
                    <Key frame="100" value="-5.3638" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0">
                    <Key frame="1" value="81.7369" />
                    <Key frame="24" value="32.5175" />
                    <Key frame="40" value="25.9" />
                    <Key frame="51" value="30.7597" />
                    <Key frame="60" value="32.3" />
                    <Key frame="75" value="32.3" />
                    <Key frame="100" value="80.7701" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0">
                    <Key frame="1" value="11.2477" />
                    <Key frame="24" value="9.31412" />
                    <Key frame="40" value="10" />
                    <Key frame="51" value="10.3688" />
                    <Key frame="60" value="9.2" />
                    <Key frame="75" value="9.2" />
                    <Key frame="100" value="11.6872" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="LWristYaw" mute="0" unit="0">
                    <Key frame="1" value="4.12851" />
                    <Key frame="24" value="-95.9802" />
                    <Key frame="40" value="-104.5" />
                    <Key frame="51" value="-95.1013" />
                    <Key frame="60" value="-90.1" />
                    <Key frame="75" value="-90.1" />
                    <Key frame="100" value="2.54646" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                    <Key frame="1" value="4.74855" />
                    <Key frame="24" value="4.74855" />
                    <Key frame="40" value="4.74855" />
                    <Key frame="51" value="4.74855" />
                    <Key frame="60" value="4.74855" />
                    <Key frame="75" value="4.74855" />
                    <Key frame="100" value="4.74855" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                    <Key frame="1" value="6.68218" />
                    <Key frame="24" value="6.68218" />
                    <Key frame="40" value="6.68218" />
                    <Key frame="51" value="6.68218" />
                    <Key frame="60" value="6.68218" />
                    <Key frame="75" value="6.68218" />
                    <Key frame="100" value="6.68218" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowRoll" mute="0" unit="0">
                    <Key frame="1" value="24.4363" />
                    <Key frame="24" value="71.8979" />
                    <Key frame="40" value="69.7006" />
                    <Key frame="51" value="66.3607" />
                    <Key frame="60" value="68.4701" />
                    <Key frame="75" value="68.4701" />
                    <Key frame="100" value="24.8758" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RElbowYaw" mute="0" unit="0">
                    <Key frame="1" value="67.4106" />
                    <Key frame="24" value="12.5661" />
                    <Key frame="40" value="12.5661" />
                    <Key frame="51" value="13.445" />
                    <Key frame="60" value="12.5661" />
                    <Key frame="75" value="12.5661" />
                    <Key frame="100" value="66.6195" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RHand" mute="0" unit="1">
                    <Key frame="1" value="0.308" />
                    <Key frame="24" value="0.996" />
                    <Key frame="40" value="0.996" />
                    <Key frame="51" value="0.986" />
                    <Key frame="60" value="0.996" />
                    <Key frame="75" value="0.996" />
                    <Key frame="100" value="0.3208" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                    <Key frame="1" value="7.29261" />
                    <Key frame="24" value="7.29261" />
                    <Key frame="40" value="7.29261" />
                    <Key frame="51" value="7.29261" />
                    <Key frame="60" value="7.29261" />
                    <Key frame="75" value="7.29261" />
                    <Key frame="100" value="7.29261" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                    <Key frame="1" value="-6.85315" />
                    <Key frame="24" value="-6.85315" />
                    <Key frame="40" value="-6.85315" />
                    <Key frame="51" value="-6.85315" />
                    <Key frame="60" value="-6.85315" />
                    <Key frame="75" value="-6.85315" />
                    <Key frame="100" value="-6.85315" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                    <Key frame="1" value="-9.92936" />
                    <Key frame="24" value="-9.92936" />
                    <Key frame="40" value="-9.92936" />
                    <Key frame="51" value="-9.92936" />
                    <Key frame="60" value="-9.92936" />
                    <Key frame="75" value="-9.92936" />
                    <Key frame="100" value="-9.92936" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                    <Key frame="1" value="-5.53478" />
                    <Key frame="24" value="-5.53478" />
                    <Key frame="40" value="-5.53478" />
                    <Key frame="51" value="-5.53478" />
                    <Key frame="60" value="-5.53478" />
                    <Key frame="75" value="-5.53478" />
                    <Key frame="100" value="-5.53478" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderPitch" mute="0" unit="0">
                    <Key frame="1" value="83.148" />
                    <Key frame="24" value="60.9993" />
                    <Key frame="40" value="60.9993" />
                    <Key frame="51" value="62.7571" />
                    <Key frame="60" value="60.9993" />
                    <Key frame="75" value="60.9993" />
                    <Key frame="100" value="82.1812" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RShoulderRoll" mute="0" unit="0">
                    <Key frame="1" value="-11.692" />
                    <Key frame="24" value="-17.0534" />
                    <Key frame="40" value="-18.3718" />
                    <Key frame="51" value="-18.6354" />
                    <Key frame="60" value="-18.987" />
                    <Key frame="75" value="-18.987" />
                    <Key frame="100" value="-12.483" />
                  </ActuatorCurve>
                  <ActuatorCurve name="" actuator="RWristYaw" mute="0" unit="0">
                    <Key frame="1" value="9.05044" />
                    <Key frame="24" value="99.6668" />
                    <Key frame="40" value="100.458" />
                    <Key frame="51" value="96.5906" />
                    <Key frame="60" value="100.458" />
                    <Key frame="75" value="100.458" />
                    <Key frame="100" value="12.1267" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
            </Box>
            <Box name="Say" id="15" localization="8" tooltip="Say some text. The text can be localized." x="1029" y="390">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Kiitos" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Go to position Stand" id="17" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="890" y="322">
              <bitmap>media/images/positions/Stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Resource name="All motors" type="Lock" timeout="0" />
              <Resource name="Stiffness" type="Lock" timeout="0" />
            </Box>
            <Box name="Go to position Stand (1)" id="16" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="475" y="562">
              <bitmap>media/images/positions/Stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Resource name="All motors" type="Lock" timeout="0" />
              <Resource name="Stiffness" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" />
            <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" />
            <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="12" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
            <Link inputowner="10" indexofinput="2" outputowner="14" indexofoutput="4" />
            <Link inputowner="17" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="15" indexofinput="2" outputowner="17" indexofoutput="4" />
            <Link inputowner="14" indexofinput="2" outputowner="17" indexofoutput="4" />
            <Link inputowner="8" indexofinput="2" outputowner="13" indexofoutput="4" />
            <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="4" />
            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
            <Link inputowner="16" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="16" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
